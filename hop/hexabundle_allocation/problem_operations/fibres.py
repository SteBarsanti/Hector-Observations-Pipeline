import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.cm as cm
import pandas as pd
import numpy as np
import datetime
import string
import csv
import re
import random
from pathlib import Path
from ..problem_operations.plots import draw_circularSegments,sky_fibre_annotations,read_sky_fibre_file,coordinates_and_angle_of_skyFibres


def extract_fibreInfo(fibre_file,output_fibreAAOmega,output_fibreSpector):

    fibre_data = pd.read_excel(fibre_file, engine = 'openpyxl')

    # Creates a list containing w lists, each of h item/s, all filled with 0
    w, h1, h2 = 10, 820, 856
    new_arrayAAOmega = [['0' for x in range(w)] for y in range(h1)]
    new_arraySpector = [['0' for x in range(w)] for y in range(h2)]


    # headers for the spectrograph fibres file
    new_arrayAAOmega[0] = new_arraySpector[0] = ['slit_pos', 'type(S/P)', 'probe_num', 'probe_fibre', \
                                'Good/bad', 'label', 'slitlet', 'cores_count', 'ring', 'position_on_slit']

    j = 1
    for i in fibre_data['Hexabundle or sky fibre']:
        if fibre_data['Spectrograph'][0] == 'AAOmega' and j < 820:

            new_arrayAAOmega[j][0] = j
            if str(i) == 'Sky':
                new_arrayAAOmega[j][1] = 'S'
                new_arrayAAOmega[j][4] = 'nan'
            elif str(i) == 'H':
                new_arrayAAOmega[j][1] = 'P'
                new_arrayAAOmega[j][4] = 'Good'
            elif str(i) == 'BLOCK':
                new_arrayAAOmega[j][4] = 'nan'
            new_arrayAAOmega[j][2] = new_arrayAAOmega[j][5] = fibre_data['Bundle/plate'][j-1]
            if fibre_data['Fibre_number'][j-1] > 0:
                new_arrayAAOmega[j][3] = round(fibre_data['Fibre_number'][j-1])
            else:
                new_arrayAAOmega[j][3] = 'nan'
            if fibre_data['no.cores'][j-1] > 0:
                new_arrayAAOmega[j][7] = round(fibre_data['no.cores'][j-1])
            else:
                new_arrayAAOmega[j][7] = 'nan'
            new_arrayAAOmega[j][6] = fibre_data['slitlet'][j-1]
            new_arrayAAOmega[j][8] = fibre_data['ring'][j-1]
            new_arrayAAOmega[j][9] = fibre_data['position on slit '][j-1]  #*** Might need to swap places with fibre number **

        elif fibre_data['Spectrograph'][819] == 'Spector' and j >= 820:

            new_arraySpector[j-819][0] = j-819
            if str(i) == 'Sky':
                new_arraySpector[j-819][1] = 'S'
                new_arraySpector[j-819][4] = 'nan'
            elif str(i) == 'H':
                new_arraySpector[j-819][1] = 'P'
                new_arraySpector[j-819][4] = 'Good'
            elif str(i) == 'BLOCK':
                new_arraySpector[j-819][4] = 'nan'
            new_arraySpector[j-819][2] = new_arraySpector[j-819][5] = fibre_data['Bundle/plate'][j - 1]
            if fibre_data['Fibre_number'][j - 1] > 0:
                new_arraySpector[j-819][3] = round(fibre_data['Fibre_number'][j - 1])
            else:
                new_arraySpector[j-819][3] = 'nan'
            if fibre_data['no.cores'][j - 1] > 0:
                new_arraySpector[j-819][7] = round(fibre_data['no.cores'][j - 1])
            else:
                new_arraySpector[j-819][7] = 'nan'
            new_arraySpector[j-819][6] = fibre_data['slitlet'][j - 1]
            new_arraySpector[j-819][8] = fibre_data['ring'][j - 1]
            new_arraySpector[j-819][9] = fibre_data['position on slit '][j-1]  # *** Might need to swap places with fibre number **

        j += 1

    print(new_arrayAAOmega)
    print(new_arraySpector)

    for i in range(2):
        if i == 0:
            output_fibreFile = output_fibreAAOmega
            fibre_array = new_arrayAAOmega
            string = 'AAOmega'
        elif i == 1:
            output_fibreFile = output_fibreSpector
            fibre_array = new_arraySpector
            string = 'Spector'

        my_file = Path(output_fibreFile)
        if my_file.is_file():
            print('Fibre Spectrograph file exists.')
        else:
            # write the fibre file array into the CSV file for the fibre spectrograph
            with open(output_fibreFile, 'w+') as output_fibre:
                output_fibre.write('# Experimental implementation of Hector_fibres_')
                output_fibre.write(string+'.txt\n')
                output_fibre.write('# \n')
                output_fibre.write('#   Ayoan Sadman\n')
                output_fibre.write('#   ')
                output_fibre.write(str(datetime.datetime.now().strftime('%B %d %y'))+'\n')
                output_fibre.write('#   Generated by "The Hector Galaxy Survey Observation Pipeline"\n')
                output_fibre.write('# \n')
                output_fibre.write('# ')
                writer = csv.writer(output_fibre, delimiter=' ', lineterminator='\n')
                writer.writerows(fibre_array)

    return new_arrayAAOmega,new_arraySpector


def create_hexabundleFibre_coordData(output_hexabundle_coordData):

    hexabundles = 'ABCDEFGHIJKLMNOPQRSTU'

    for i in hexabundles:
        if i < 'C':
            cores = 169
        elif i == 'C':
            cores = 127
        elif (i == 'D') or (i == 'I'):
            cores = 91
        elif ('D' < i < 'H') or ('I' < i < 'U'):
            cores = 61
        elif (i == 'H') or (i == 'U'):
            cores = 37

        # Creates a list containing w lists, each of h item/s, all filled with 0
        w, h = 4, cores
        file_array = [['0' for x in range(w)] for y in range(h)]

        for j in range(1,cores+1):
            file_array[j-1][0] = j
            if j == 1:
                ring = 0
            elif 1 < j < 8:
                ring = 1
            elif 7 < j < 20:
                ring = 2
            elif 19 < j < 38:
                ring = 3
            elif 37 < j < 62:
                ring = 4
            elif 61 < j < 92:
                ring = 5
            elif 91 < j < 128:
                ring = 6
            elif 127 < j < 170:
                ring = 7
            file_array[j - 1][1] = ring

        print(file_array)

        output_file = output_hexabundle_coordData + 'hexabundle_' + i + '.txt'

        my_file = Path(output_file)
        if my_file.is_file():
            print('Hexabundle coordinate data of '+i+ ' file exists.')
        else:
            # write the hexabundle file array into the CSV file for the fibre coordinate data
            with open(output_file, 'w+') as output_fibre:
                output_fibre.write('# Hexabundle "')
                output_fibre.write(str(i) + '" Coordinates Definition - _transformed\n')
                output_fibre.write('# Date: ')
                output_fibre.write(str(datetime.datetime.now().strftime('%d-%B-%y %H:%M:%S')) + '\n')
                output_fibre.write('# Probe: Probe ' + str(i) + '\n')
                output_fibre.write('# Hexabundle: ' + str(i) +  '\n')
                output_fibre.write('# Manufacture:  \n')
                output_fibre.write('# col 1: ID  \n')
                output_fibre.write('# col 2: Radial Ring Number \n')
                output_fibre.write('# col 3: Fiber Core X [sky-east] (microns) \n')
                output_fibre.write('# col 4: Fiber Core Y [sky-north] (microns) \n')
                writer = csv.writer(output_fibre, delimiter=' ', lineterminator='\n')
                writer.writerows(file_array)


def convert_rectangularMagnetOrientation(magnet):

    #   Probe orientation is the rotation of the hexabundle on sky between -180 to +180 degrees
    #   where 0 degrees is the orientation in which the cable end of the hexabundle ferule is
    #   pointing north on the field plate and the hexabundle end of the ferule is pointing South,
    #   and the table defining the centre positions of the fibre cores is oriented such that North
    #   is at the top, as imaged at input face of the prism. The image is flipped N-S through the
    #   prism and hence the north direction maps to the field-plate side of the hexabundle face. The
    #   positive angle rotation rotates the ferule tail towards the astronomical west on the field
    #   plate, which rotates the image on the hexabundle towards from north towards east.

    if magnet.__class__.__name__ == 'rectangular_magnet':

        probe_orientation = magnet.orientation
        while probe_orientation > 180:
            probe_orientation = probe_orientation - 360
        while probe_orientation < -180:
            probe_orientation = probe_orientation + 360

    elif magnet.__class__.__name__ == 'circular_magnet':
        probe_orientation = 0

    return probe_orientation

def create_slitletFigure(new_arrayAAOmega,new_arraySpector,fibreFigure_AAOmega, fibreFigure_Spector):

    print((new_arrayAAOmega))
    print('figure being created')
    # fibre_data = pd.read_excel(fibre_file)

    plt.figure(3)
    plt.clf()
    j = 1
    for slitlet_count in range(13):

        y_start = 858 - (66 * (slitlet_count+1))
        plt.gcf().gca().add_patch(patches.Rectangle((20, y_start), 20, 63, edgecolor='black',facecolor='none',lw=2, zorder=3))

        colours = ['#C7980A', '#F4651F', '#82D8A7', '#CC3A05', '#575E76', '#156943', '#0BD055', '#ACD338']

        y = y_start + 62
        x_1 = 20
        x_2 = 40
        for i in range(63):

            if len(str(new_arrayAAOmega[j][2])) == 2:
                color = 'skyblue'
            elif len(str(new_arrayAAOmega[j][2])) == 3:
                color = 'red'
            elif str(new_arrayAAOmega[j][2]) == 'A':
                color = 'navy'
            elif str(new_arrayAAOmega[j][2]) == 'B':
                color = 'grey'
            elif str(new_arrayAAOmega[j][2]) == 'C':
                color = 'brown'
            elif str(new_arrayAAOmega[j][2]) == 'D':
                color = 'purple'
            elif str(new_arrayAAOmega[j][2]) == 'E':
                color = 'crimson'
            elif str(new_arrayAAOmega[j][2]) == 'F':
                color = 'peru'
            elif str(new_arrayAAOmega[j][2]) == 'G':
                color = 'green'
            elif str(new_arrayAAOmega[j][2]) == 'H':
                color = 'gold'

            plt.gcf().gca().add_patch(plt.Rectangle((x_1, y), x_2 - x_1, 1,facecolor=color))
            y = y - 1
            j += 1

        plt.gcf().gca().add_artist(plt.annotate(str(slitlet_count + 1), xy=(30, y + 30), xytext=(30, y + 30), xycoords='data', \
                         fontsize=10, ha='right', va='center', rotation=0, color='white'))

    # Adjust the fontsizes on tick labels for this plot
    fs = 9.0

    # Here is the label and arrow code of interest
    plt.gcf().gca().add_artist(plt.annotate('A', xy=(19, 763), xytext=(16, 763), xycoords='data',\
                fontsize=fs , ha='right',va='center', rotation=0, color='navy',  \
                bbox=dict(boxstyle='square', fc='white'),\
                arrowprops=dict(arrowstyle='-[, widthB=3.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=51', xy=(20, 672), xytext=(16, 672), xycoords='data',\
                fontsize=fs * 0.7 , ha='right',va='center', rotation=0, color='navy', \
                arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('C', xy=(41, 601), xytext=(44, 601), xycoords='data',\
                fontsize=fs , ha='right',va='center', rotation=0, color='brown',  \
                bbox=dict(boxstyle='square', fc='white'),\
                arrowprops=dict(arrowstyle='-[, widthB=2.45, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=52', xy=(40, 672), xytext=(44, 672), xycoords='data',\
                fontsize=fs * 0.7 , ha='left',va='center', rotation=0, color='brown', \
                arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('F', xy=(19, 493.5), xytext=(16, 493.5), xycoords='data', \
                fontsize=fs, ha='right', va='center', rotation=0, color='peru', \
                bbox=dict(boxstyle='square', fc='white'), \
                arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))

    # plt.gcf().gca().add_artist(plt.annotate('fibre_num=58', xy=(19, 530), xytext=(16, 530), xycoords='data', \
    #             fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='brown', \
    #             arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('F', xy=(19, 493.5), xytext=(16, 493.5), xycoords='data', \
                fontsize=fs, ha='right', va='center', rotation=0, color='peru', \
                bbox=dict(boxstyle='square', fc='white'), \
                arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('G', xy=(19, 427.5), xytext=(16, 427.5), xycoords='data', \
                fontsize=fs, ha='right', va='center', rotation=0, color='green', \
                bbox=dict(boxstyle='square', fc='white'), \
                arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('E', xy=(19, 361.5), xytext=(16, 361.5), xycoords='data', \
                fontsize=fs, ha='right', va='center', rotation=0, color='crimson', \
                bbox=dict(boxstyle='square', fc='white'), \
                arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('D', xy=(41, 285.5), xytext=(44, 285.5), xycoords='data', \
                fontsize=fs, ha='left', va='center', rotation=0, color='purple', \
                bbox=dict(boxstyle='square', fc='white'), \
                arrowprops=dict(arrowstyle='-[, widthB=1.1, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=16', xy=(40, 245), xytext=(44, 245), xycoords='data',\
                fontsize=fs * 0.7 , ha='left',va='center', rotation=0, color='purple', \
                arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('D', xy=(41, 197), xytext=(44, 197), xycoords='data', \
                fontsize=fs, ha='left', va='center', rotation=0, color='purple', \
                bbox=dict(boxstyle='square', fc='white'), \
                arrowprops=dict(arrowstyle='-[, widthB=0.3, lengthB=0.5, angleB=1.0', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=54', xy=(40, 208), xytext=(44, 136), xycoords='data',\
                fontsize=fs * 0.7 , ha='left',va='center', rotation=0, color='purple', \
                arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=9', xy=(40, 186), xytext=(43, 96), xycoords='data',\
                fontsize=fs * 0.7 , ha='left',va='center', rotation=0, color='purple', \
                arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('fibre_num=17\n ★ H ★\n fibre_num=53', xy=(19, 226.5), xytext=(16, 226.5), xycoords='data', \
                fontsize=fs*0.8, ha='right', va='center', rotation=0, color='black', \
                bbox=dict(boxstyle='square', fc='white'), \
                arrowprops=dict(arrowstyle='-[, widthB=0.7, lengthB=0.5', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('B', xy=(19, 94), xytext=(16, 94), xycoords='data', \
                fontsize=fs, ha='right', va='center', rotation=0, color='grey', \
                bbox=dict(boxstyle='square', fc='white'), \
                arrowprops=dict(arrowstyle='-[, widthB=3.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=10', xy=(20, 186), xytext=(16, 146), xycoords='data', \
                fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='grey', \
                arrowprops=dict(arrowstyle='-', lw=1.0)))

    for i in [793,727,661,595,199,133,67,1]:
        plt.gcf().gca().add_artist(plt.annotate('▮ BLOCK', xy=(40, i), xytext=(50, 400), xycoords='data', \
                                                fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='red', \
                                                arrowprops=dict(arrowstyle='-', color='red',lw=0.7)))
    # plt.gcf().gca().add_artist(plt.annotate('▮ BLOCK', xy=(40, 1), xytext=(48, 400), xycoords='data', \
    #                                             fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='red', \
    #                                             arrowprops=dict(arrowstyle='-', color='red',lw=0.8)))

    plt.xlim(-10, 70)
    plt.ylim(-10, 870)
    plt.axis('off')
    # plt.show()
    figure = plt.gcf()

    figure.set_size_inches(6,8)
    plt.savefig(fibreFigure_AAOmega, dpi=500)

    ## Spector slitelets figure

    plt.figure(4)
    plt.clf()
    j = 1
    for slitlet_count in range(19):

        y_start = 915 - (48 * (slitlet_count + 1))
        plt.gcf().gca().add_patch(patches.Rectangle((20, y_start), 20, 45, edgecolor='black', facecolor='none', lw=2, zorder=3))

        y = y_start + 44
        x_1 = 20
        x_2 = 40
        for i in range(45):

            if len(str(new_arraySpector[j][2])) == 2:
                color = 'skyblue'
            elif len(str(new_arraySpector[j][2])) == 3:
                color = 'red'
            elif str(new_arraySpector[j][2]) == 'I':
                color = 'navy'
            elif str(new_arraySpector[j][2]) == 'J':
                color = 'brown'
            elif str(new_arraySpector[j][2]) == 'K':
                color = 'peru'
            elif str(new_arraySpector[j][2]) == 'L':
                color = 'green'
            elif str(new_arraySpector[j][2]) == 'M':
                color = 'crimson'
            elif str(new_arraySpector[j][2]) == 'N':
                color = 'purple'
            elif str(new_arraySpector[j][2]) == 'O':
                color = 'chocolate'
            elif str(new_arraySpector[j][2]) == 'P':
                color = 'navy'
            elif str(new_arraySpector[j][2]) == 'Q':
                color = 'brown'
            elif str(new_arraySpector[j][2]) == 'R':
                color = 'peru'
            elif str(new_arraySpector[j][2]) == 'S':
                color = 'green'
            elif str(new_arraySpector[j][2]) == 'T':
                color = 'crimson'
            elif str(new_arraySpector[j][2]) == 'U':
                color = 'gold'

            plt.gcf().gca().add_patch(plt.Rectangle((x_1, y), x_2 - x_1, 1, facecolor=color))
            y = y - 1
            j += 1

        plt.gcf().gca().add_artist(
            plt.annotate(str(slitlet_count + 1), xy=(30, y + 22), xytext=(30, y + 22), xycoords='data', \
                         fontsize=10, ha='right', va='center', rotation=0, color='white'))

    # Adjust the fontsizes on tick labels for this plot
    fs = 9.0

    # Here is the label and arrow code of interest
    plt.gcf().gca().add_artist(plt.annotate('I', xy=(19, 859.5), xytext=(16, 859.5), xycoords='data', \
                                            fontsize=fs, ha='right', va='center', rotation=0, color='navy', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=2.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=8', xy=(20, 808), xytext=(16, 808), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='navy', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('J', xy=(41, 774), xytext=(44, 774), xycoords='data', \
                                            fontsize=fs, ha='right', va='center', rotation=0, color='brown', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=9', xy=(40, 807), xytext=(44, 807), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='brown', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=27', xy=(40, 741), xytext=(44, 741), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='brown', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('K', xy=(19, 704), xytext=(16, 704), xycoords='data', \
                                            fontsize=fs, ha='right', va='center', rotation=0, color='peru', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=28', xy=(20, 740), xytext=(16, 740), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='peru', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=4', xy=(20, 668), xytext=(16, 668), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='peru', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('L', xy=(41, 634), xytext=(44, 634), xycoords='data', \
                                            fontsize=fs, ha='left', va='center', rotation=0, color='green', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=5', xy=(40, 667), xytext=(44, 667), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='green', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=23', xy=(40, 601), xytext=(44, 601), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='green', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('M', xy=(19, 567), xytext=(16, 567), xycoords='data', \
                                            fontsize=fs, ha='right', va='center', rotation=0, color='crimson', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=24', xy=(20, 600), xytext=(16, 600), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='crimson', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=42', xy=(20,534), xytext=(16,534), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='crimson', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('N', xy=(41, 497), xytext=(44, 497), xycoords='data', \
                                            fontsize=fs, ha='left', va='center', rotation=0, color='purple', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=43', xy=(40, 533), xytext=(44, 533), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='purple', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=19', xy=(40, 461), xytext=(44, 461), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='purple', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('O', xy=(19, 427), xytext=(16, 427), xycoords='data', \
                                            fontsize=fs, ha='right', va='center', rotation=0, color='chocolate', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=20', xy=(20, 460), xytext=(16, 460), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=38', xy=(20,394), xytext=(16,394), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('P', xy=(41, 357), xytext=(44, 357), xycoords='data', \
                                            fontsize=fs, ha='left', va='center', rotation=0, color='navy', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=39', xy=(40, 393), xytext=(44, 393), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='navy', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=15', xy=(40, 321), xytext=(44, 321), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='navy', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('Q', xy=(19, 287), xytext=(16, 287), xycoords='data', \
                                            fontsize=fs, ha='right', va='center', rotation=0, color='chocolate', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=16', xy=(20, 320), xytext=(16, 320), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=34', xy=(20,254), xytext=(16,254), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('R', xy=(41, 249), xytext=(44, 249), xycoords='data', \
                                            fontsize=fs, ha='left', va='center', rotation=0, color='chocolate', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=0.3, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=35', xy=(40, 254), xytext=(44, 284), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('R', xy=(41, 170), xytext=(44, 170), xycoords='data', \
                                            fontsize=fs, ha='left', va='center', rotation=0, color='chocolate', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=39', xy=(40, 201), xytext=(44, 210), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=6', xy=(40, 138), xytext=(44, 130), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('Q', xy=(19, 287), xytext=(16, 287), xycoords='data', \
                                            fontsize=fs, ha='right', va='center', rotation=0, color='chocolate', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=16', xy=(20, 320), xytext=(16, 320), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=34', xy=(20, 254), xytext=(16, 254), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='chocolate', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('S', xy=(19, 104), xytext=(16, 104), xycoords='data', \
                                            fontsize=fs, ha='right', va='center', rotation=0, color='green', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=7', xy=(20, 137), xytext=(16, 137), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='green', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=25', xy=(20, 71), xytext=(16, 71), xycoords='data', \
                                            fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='green', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('T', xy=(41, 37), xytext=(44, 37), xycoords='data', \
                                            fontsize=fs, ha='left', va='center', rotation=0, color='crimson', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=1.0, lengthB=0.5', lw=1.0)))
    plt.gcf().gca().add_artist(plt.annotate('fibre_num=26', xy=(40, 70), xytext=(44, 70), xycoords='data', \
                                            fontsize=fs * 0.7, ha='left', va='center', rotation=0, color='crimson', \
                                            arrowprops=dict(arrowstyle='-', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('fibre_num=2\n ★ U ★\n fibre_num=38', xy=(19, 220), xytext=(16, 210), \
                                            xycoords='data', fontsize=fs * 0.6, ha='right', va='center', rotation=0, \
                                            color='black', bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-[, widthB=0.7, lengthB=0.5', lw=1.0)))

    plt.gcf().gca().add_artist(plt.annotate('▮ BLOCK', xy=(40, 867), xytext=(44, 867), xycoords='data', \
                                            fontsize=fs, ha='left', va='center', rotation=0, color='red', \
                                            bbox=dict(boxstyle='square', fc='white'), \
                                            arrowprops=dict(arrowstyle='-', color='red', lw=0.7)))

    # for i in [793, 727, 661, 595, 199, 133, 67, 1]:
    #     plt.gcf().gca().add_artist(plt.annotate('▮ BLOCK', xy=(40, i), xytext=(45, 400), xycoords='data', \
    #                                             fontsize=fs * 0.7, ha='right', va='center', rotation=0, color='red', \
    #                                             arrowprops=dict(arrowstyle='-', color='red', lw=0.7)))


    plt.xlim(-10, 70)
    plt.ylim(-10, 930)
    plt.gcf().set_size_inches(6, 8)
    plt.axis('off')
    # plt.show()

    plt.savefig(fibreFigure_Spector, dpi=500)


def create_skyFibreSlitlet_figure( new_arrayAAOmega,new_arraySpector, skyFibre_AAOmegaFigure, skyFibre_SpectorFigure):

    plt.figure(5)
    plt.clf()
    fs = 5

    skyFibresArray_AAOmega = {}
    for i in new_arrayAAOmega[1:]:
        if str(i[1]) != 'P':
            key = i[6]
            value = str(i[5])
            value_2 = i[9]
            skyFibresArray_AAOmega.setdefault(key, []).append({value: value_2})

    print(skyFibresArray_AAOmega)

    for slitlet_count in range(13):

        # plotting the slitlet as a rectangle
        x_start = 20
        y_start = 858 - (80 * (slitlet_count + 1))
        plt.gcf().gca().add_patch(
            patches.Rectangle((x_start, y_start), 10, 63, facecolor='grey', lw=2, zorder=2))

        # plotting the enfing borderline for each slitelet after the slitlet number label
        y = y_start + 62
        plt.gcf().gca().add_patch(
            patches.Rectangle((x_start - 10, y - 70), 10, 2, facecolor='black', lw=2, zorder=2))

        # plotting the slitlet number as a label beside the slitlet
        plt.gcf().gca().add_artist(
            plt.annotate(str(slitlet_count + 1), xy=(x_start - 6, y - 30), xytext=(x_start - 8, y - 30), \
                         xycoords='data', fontsize=10, ha='right', va='center', rotation=0, color='black'))

        direction = 'left'
        x_text = x_start - 5
        for i in skyFibresArray_AAOmega:
            if (slitlet_count + 1) == i:
                k = 0
                for j in skyFibresArray_AAOmega[i]:

                    for l in j:

                        position = random.randint(0, 3) # MUST CHANGE TO READING ACTUAL POSITION OF SKYFIBRE SUBPLATES
                        if position == 0:
                            fill_color = 'black'
                        elif position != 0:
                            fill_color = 'grey'


                        if l == 'nan':
                            color = 'red'
                            text = '▮'

                        else:
                            color = 'blue'
                            text = l

                        if skyFibresArray_AAOmega[i][k][l] == 1:
                            Y_adjustment = 53
                        elif skyFibresArray_AAOmega[i][k][l] == 2:
                            Y_adjustment = 43
                        elif skyFibresArray_AAOmega[i][k][l] == 3:
                            Y_adjustment = 33
                        elif skyFibresArray_AAOmega[i][k][l] == 61:
                            Y_adjustment = 20
                        elif skyFibresArray_AAOmega[i][k][l] == 62:
                            Y_adjustment = 10
                        elif skyFibresArray_AAOmega[i][k][l] == 63:
                            Y_adjustment = 0
                        plt.gcf().gca().add_patch(
                            patches.Rectangle((x_start, y_start + Y_adjustment), 10, 10, edgecolor=color,
                                              facecolor=fill_color,
                                              lw=1, zorder=3))

                        plt.gcf().gca().add_artist(
                            plt.annotate(text, xy=(x_start, y_start + Y_adjustment + 5),
                                         xytext=(x_text, y_start + Y_adjustment + 5), xycoords='data', fontsize=fs, \
                                         ha=direction, va='center', rotation=0, color=color,
                                         arrowprops=dict(arrowstyle='-', lw=1.0)))

                        plt.gcf().gca().add_artist(
                            plt.annotate(str(position), xy=(x_start+10, y_start + Y_adjustment + 5),
                                         xytext=(x_text+18, y_start + Y_adjustment + 5), xycoords='data', fontsize=fs, \
                                         ha='right', va='center', rotation=0, color=color,
                                         arrowprops=dict(arrowstyle='-', lw=1.0)))

                        if x_text == x_start - 5:
                            x_text = x_start - 4
                        elif x_text == x_start - 4:
                            x_text = x_start - 5

                    k += 1

    plt.xlim(0, 40)
    plt.ylim(-200, 900)
    plt.axis('off')
    # plt.show()
    plt.gcf().set_size_inches(6, 8)
    plt.savefig(skyFibre_AAOmegaFigure)


    plt.figure(6)
    plt.clf()
    fs = 5

    skyFibresArray_Spector = {}
    for i in new_arraySpector[1:]:
        if str(i[1]) != 'P':
            key = i[6]
            value = str(i[5])
            value_2 = i[9]
            skyFibresArray_Spector.setdefault(key,[]).append({value:value_2})


    print(skyFibresArray_Spector)

    for slitlet_count in range(19):

        x_start = 20
        y_start = 858 - (80 * (slitlet_count +1))
        plt.gcf().gca().add_patch(
            patches.Rectangle((x_start, y_start), 10, 63, facecolor='grey', lw=2, zorder=2))

        y = y_start + 62
        plt.gcf().gca().add_patch(
            patches.Rectangle((x_start - 10, y - 70), 10, 2, facecolor='black', lw=2, zorder=2))



        plt.gcf().gca().add_artist(
            plt.annotate(str(slitlet_count + 1), xy=(x_start - 6, y - 30), xytext=(x_start - 8, y - 30), \
                         xycoords='data', fontsize=10, ha='right', va='center', rotation=0, color='black'))

        direction = 'left'
        x_text = x_start - 5
        for i in skyFibresArray_Spector:
            if (slitlet_count+1) == i:
                k = 0
                for j in skyFibresArray_Spector[i]:

                    for l in j:

                        position = random.randint(0, 3) # MUST CHANGE TO READING ACTUAL POSITION OF SKYFIBRE SUBPLATES
                        if position == 0:
                            fill_color = 'black'
                        elif position != 0:
                            fill_color = 'grey'

                        if l == 'nan':
                            color = 'red'
                            text = '▮'
                        else:
                            color = 'blue'
                            text = l

                        if skyFibresArray_Spector[i][k][l] == 1:
                            Y_adjustment = 53
                        elif skyFibresArray_Spector[i][k][l] == 2:
                            Y_adjustment = 43
                        elif skyFibresArray_Spector[i][k][l] == 3:
                            Y_adjustment = 33
                        elif skyFibresArray_Spector[i][k][l] == 43:
                            Y_adjustment = 20
                        elif skyFibresArray_Spector[i][k][l] == 44:
                            Y_adjustment = 10
                        elif skyFibresArray_Spector[i][k][l] == 45:
                            Y_adjustment = 0
                        plt.gcf().gca().add_patch(
                            patches.Rectangle((x_start, y_start + Y_adjustment), 10, 10, edgecolor=color, facecolor=fill_color,
                                              lw=1, zorder=3))

                        plt.gcf().gca().add_artist(
                            plt.annotate(text, xy=(x_start, y_start + Y_adjustment + 5),
                                         xytext=(x_text, y_start + Y_adjustment + 5), xycoords='data', fontsize=fs, \
                                         ha=direction, va='center', rotation=0, color=color,
                                         arrowprops=dict(arrowstyle='-', lw=1.0)))

                        plt.gcf().gca().add_artist(
                            plt.annotate(str(position), xy=(x_start + 10, y_start + Y_adjustment + 5),
                                         xytext=(x_text + 18, y_start + Y_adjustment + 5), xycoords='data', fontsize=fs, \
                                         ha='right', va='center', rotation=0, color=color,
                                         arrowprops=dict(arrowstyle='-', lw=1.0)))

                        if x_text == x_start - 5:
                            x_text = x_start - 4
                        elif x_text == x_start - 4:
                            x_text = x_start - 5

                    k += 1


    plt.xlim(0, 40)
    # plt.ylim(420, 870)
    plt.ylim(-680, 900)
    plt.axis('off')
    # plt.show()
    plt.gcf().set_size_inches(6, 8)
    plt.savefig(skyFibre_SpectorFigure)


def createHexabundleFigure_withChangeShown(tile_1,tile_2,subplateSkyfibre_figureFile_tile1,subplateSkyfibre_figureFile_tile2,fileNameHexa):

    # df_skyfibre = pd.read_csv(fileNameHexa, sep=' ')
    #
    # mask = df_skyfibre['probe'] < 22
    # df_skyfibre = df_skyfibre[~mask]
    # print("\nFibre file reading array here")
    # print(df_skyfibre)
    #
    # skyfibreDict = {}
    # subplate_info = df_skyfibre['IDs']
    # position = df_skyfibre['Position']
    # print(position)
    # j= 35
    # for i in subplate_info:
    #     # print(i[4:6])
    #     # print(i[7])
    #     print(int(position[35]))
    #
    #     # skyfibreDict[i[4:5]] = {int(i[7]): int(position[j])}
    #     if (str(i[4:6])) not in skyfibreDict:
    #         skyfibreDict[str(i[4:6])] = []
    #     skyfibreDict[str(i[4:6])].append({int(i[7]):int(position[j])})
    #
    #     j += 1
    #
    # print(skyfibreDict)




    plt.figure(7)
    plt.clf()

    skyfibreDict_tile1 = read_sky_fibre_file(tile_1)
    skyfibreDict_tile2 = read_sky_fibre_file(tile_2)

    draw_circularSegments()

    sky_fibre_annotations(tile_1)



    plt.axis('off')
    axes = plt.gca()
    axes.set_xlim([-350, 350])
    axes.set_ylim([-350, 350])
    # plt.show()                ## for showing the figure of magnets with pickup area
    plt.gcf().set_size_inches(6, 6)
    plt.savefig(subplateSkyfibre_figureFile_tile1)

    plt.figure(8)
    plt.clf()

    # skyfibreDict_tile1 = read_sky_fibre_file(tile_1)
    # skyfibreDict_tile2 = read_sky_fibre_file(tile_2)

    draw_circularSegments()

    skyfibreDict = skyfibreDict_tile2
    angle_subplate = [7, 5, 3, 1, -1, -3, -5, -7]
    radii = 270

    # filename = 'Sky_fibre_position_example.csv'
    # skyfibreDict = read_sky_fibre_file(skyfibre_file)
    # print(skyfibreDict)
    string = str(skyfibreDict['H3'][5].keys())
    print(re.sub('[^0-9]', '', string))

    # sky fibres top batch
    angle = 30
    skyfibreTitles_top = ['H3', 'A3', 'H4', 'A4']
    for i in range(0, 4):
        x, y, rotation = coordinates_and_angle_of_skyFibres(angle, radii)
        plt.annotate(skyfibreTitles_top[i], (x, y), color='black', rotation=rotation, fontsize=11, ha='center',
                     va='center')
        for j in range(len(skyfibreDict[skyfibreTitles_top[i]])):
            if skyfibreDict[skyfibreTitles_top[i]][j][j + 1] == skyfibreDict_tile1[skyfibreTitles_top[i]][j][j + 1]:
                colour1 = colour2 = 'black'
            else:
                colour1 = 'orange'
                colour2 = 'yellow'
            angle_pos = angle + angle_subplate[j]
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 342)
            fibre_num = re.sub('[^0-9]', '', str(skyfibreDict[skyfibreTitles_top[i]][j].keys()))
            plt.annotate(fibre_num, (x, y), color=colour1, rotation=rotation, fontsize=5, ha='center', va='center')
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 308)
            plt.annotate('▮', (x, y), color=colour2, rotation=rotation, fontsize=7, ha='center', va='center')
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 322)
            plt.annotate(str(skyfibreDict[skyfibreTitles_top[i]][j][j + 1]), (x, y), color=colour2, rotation=rotation,
                         fontsize=6, weight='bold', ha='center', va='center')
        if skyfibreTitles_top[i][0] == 'H':
            alpha = 0.4
        elif skyfibreTitles_top[i][0] == 'A':
            alpha = 0.7
        draw_wedge = patches.Wedge((0, 0), r=333, theta1=angle - 9 + 90, theta2=angle + 9 + 90, width=90,
                                   facecolor='gray', edgecolor='black', alpha=alpha)
        plt.gcf().gca().add_artist(draw_wedge)
        angle = angle - 20

    # sky fibres left batch
    angle = 150
    skyfibreTitles_left = ['A1', 'H1', 'H2', 'A2']
    for i in range(0, 4):
        x, y, rotation = coordinates_and_angle_of_skyFibres(angle, radii)
        plt.annotate(skyfibreTitles_left[i], (x, y), color='black', rotation=rotation, fontsize=11, ha='center',
                     va='center')
        for j in range(len(skyfibreDict[skyfibreTitles_left[i]])):
            if skyfibreDict[skyfibreTitles_left[i]][j][j + 1] == skyfibreDict_tile1[skyfibreTitles_left[i]][j][j + 1]:
                colour1 = colour2 = 'black'
            else:
                colour1 = 'orange'
                colour2 = 'yellow'
            angle_pos = angle + angle_subplate[j]
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 342)
            fibre_num = re.sub('[^0-9]', '', str(skyfibreDict[skyfibreTitles_left[i]][j].keys()))
            plt.annotate(fibre_num, (x, y), color=colour1, rotation=rotation, fontsize=5, ha='center', va='center')
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 308)
            plt.annotate('▮', (x, y), color=colour2, rotation=rotation, fontsize=7, ha='center', va='center')
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 322)
            plt.annotate(str(skyfibreDict[skyfibreTitles_left[i]][j][j + 1]), (x, y), color=colour2, rotation=rotation,
                         fontsize=6, weight='bold', ha='center', va='center')
        if skyfibreTitles_left[i][0] == 'H':
            alpha = 0.4
        elif skyfibreTitles_left[i][0] == 'A':
            alpha = 0.7
        draw_wedge = patches.Wedge((0, 0), r=333, theta1=angle - 9 + 90, theta2=angle + 9 + 90, width=90,
                                   facecolor='gray', edgecolor='black', alpha=alpha)
        plt.gcf().gca().add_artist(draw_wedge)
        angle = angle - 20

    # sky fibres right batch
    angle = -160
    skyfibreTitles_right = ['H7', 'A5', 'H6', 'H5']
    for i in range(0, 4):
        x, y, rotation = coordinates_and_angle_of_skyFibres(angle, radii)
        plt.annotate(skyfibreTitles_right[i], (x, y), color='black', rotation=rotation, fontsize=11, ha='center',
                     va='center')
        for j in range(len(skyfibreDict[skyfibreTitles_right[i]])):
            if skyfibreDict[skyfibreTitles_right[i]][j][j + 1] == skyfibreDict_tile1[skyfibreTitles_right[i]][j][j + 1]:
                colour1 = colour2 = 'black'
            else:
                colour1 = 'orange'
                colour2 = 'yellow'
            angle_pos = angle + angle_subplate[j]
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 342)
            fibre_num = re.sub('[^0-9]', '', str(skyfibreDict[skyfibreTitles_right[i]][j].keys()))
            plt.annotate(fibre_num, (x, y), color=colour1, rotation=rotation, fontsize=5, ha='center', va='center')
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 308)
            plt.annotate('▮', (x, y), color=colour2, rotation=rotation, fontsize=7, ha='center', va='center')
            x, y, rotation = coordinates_and_angle_of_skyFibres(angle_pos, 322)
            plt.annotate(str(skyfibreDict[skyfibreTitles_right[i]][j][j + 1]), (x, y), color=colour2, rotation=rotation,
                         fontsize=6, weight='bold', ha='center', va='center')
        if skyfibreTitles_right[i][0] == 'H':
            alpha = 0.4
        elif skyfibreTitles_right[i][0] == 'A':
            alpha = 0.7
        draw_wedge = patches.Wedge((0, 0), r=333, theta1=angle - 9 + 90, theta2=angle + 9 + 90, width=90,
                                   facecolor='gray', edgecolor='black', alpha=alpha)
        plt.gcf().gca().add_artist(draw_wedge)
        angle = angle + 20


    plt.axis('off')
    axes = plt.gca()
    axes.set_xlim([-350, 350])
    axes.set_ylim([-350, 350])
    # plt.show()                ## for showing the figure of magnets with pickup area
    plt.gcf().set_size_inches(6, 6)
    plt.savefig(subplateSkyfibre_figureFile_tile2)

